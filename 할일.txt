db스키마추가(유니크처리는 데드락?일단 등록은 해두고)
pk스트링으로 갭락 막기 (https://velog.io/@mooh2jj/reservation-system-concurrency-control-and-double-booking-how-to-prevent-duplicate-requests)
db설정추가


순서
    예약확인
    임시예약생성(여기서 동기문제발생)
    예약결제(임시예약업데이트)

예약확인
    해당 창고의 현재기준 이후의 모든 예약(아니면 1년정도루 줄여도됨) 상황 리턴
    임시예약도 포함

임시예약생성
    낙관적락 사용(유니크처리)
    인서트 실패시 캐치해서 프론트로 예외 던져서 다시 예약확인시키기
    검색 대상이 되는 객체 조건에 색인(index) 추가

예약결제
    오후 10시부터 오전 6시까지 할증
    일요일할증
    할증들은 데코레이터사용(곱연산 합연산 따로처리가능하게)

기타
    임시예약은 생성되고 30분이 지나면 배치로 삭제

창고테이블은
    창고id
    창고번호
    창고이름
    기본가격

할증테이블은
    할증id
    할증이름
    할증퍼센트
    할증 연산방식


창고예약테이블은
    창고id
    예약멤버(이건 간략하게 이름받는거로 처리)
    시작시간
    종료시간
    결제금액
    예약상태(임시,결제완료,취소,환불,완료?)

타임슬롯처리를 위해 jpa엔티티와 기본엔티티분리?


타임슬롯과 타임라인추가


타임슬롯은 하루를 표현,타임라인은 타임슬롯들을 모아두는 리스트
시작시간과 종료시간을 받고,타임슬롯 n개(시작날짜~중간날짜~종료날짜)로 분리


11:00~12:00
09:00~10:00//논오버랩
10:30~11:30//오버랩
11:20~11:40//오버랩
10:00~14:00//오버랩
15:00~15:30//논오버랩

포개지거나,일부겹치거나//오버랩
앞에있거나,뒤에있거나//논오버랩
날짜다르면//무조건논오버랩


start가 작고 && end가 크거나(새로운예약이 기존 예약을 완전히 포함)//사실상겹침
new.startTime < existing.endTime(새로운 예약 시작시간이 기존예약시간범위안에 있음)
new.endTime > existing.startTime(새로운 예약 종료시간이 기존예약시간범위안에 있음)


타임슬롯(각 날짜별 예약시간)//한예약은 하나이상의 타임슬롯으로 구성됨
ReservationSlots(localdatetime2개를 생성자로 받음,해당시간2개를 타임슬롯n개로 쪼개서 가짐)//한예약은 하나의 ReservationSlots으로 구성됨
    ReservationId(필요한가?양방향이 필요하면 있어야할거같긴하다)
    startTime
    endTime
    함수
        타임슬롯리스트 생성


타임라인(ReservationSlots의 모음)//한 창고의 모든 예약은 하나의 타임라인으로 구성됨(창고id와 ReservationSlots의 스타트엔드를 인덱스로)
    창고id
    list<ReservationSlots>//정렬되어있어야함
        함수
            ReservationSlots의 오버랩여부를 체크(왼쪽과 오른쪽을 ReservationSlots으로 변경한후 비교하면될듯?)
            현재 타임라인에 정렬을 유지한채로 ReservationSlots을 삽입

이때 타임라인에 넣을때 ReservationSlots의 오버랩 여부를 체크
    바이너리서치 위치를 찾고(종료시간만 가지고 정렬해도될듯)
    해당위치의 왼쪽 엔드과 ReservationSlots의 스타트를 비교(왼쪽엔드<ReservationSlots스타트)
    해당위치의 오른쪽 스타트와 ReservationSlots의 엔드를 비교(오른쪽스타트>ReservationSlots엔드)

09:00~10:00
11:00~12:00
15:00~15:30