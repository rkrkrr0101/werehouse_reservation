db스키마추가(유니크처리는 데드락?일단 등록은 해두고)
pk스트링으로 갭락 막기 (https://velog.io/@mooh2jj/reservation-system-concurrency-control-and-double-booking-how-to-prevent-duplicate-requests)
db설정추가

surcharge에서는 시간과 값을 받아서 곱하고 처리하기만 함
시간을 자르는역할은 다른애가 처리

ReservationTime을 받아서,해당 클래스의 날짜 금액을 계산해주는 도메인서비스
날짜기반은 알아서 처리한다고 치고,쿠폰같은건 다른클래스에서 처리
만약 날짜별이 곱연산이 아닌,값이 아예 고정값으로 들어와야한다면?
전략패턴에 하나 추가해서,고정값을 리턴하는걸 받아서 basicPrice대신 사용
override fun calculateFare(duration: Long): Double {
    return SPECIAL_BASE_FARE // 특정 대상에 대한 기본 요금 변경
}
이런느낌

이제 도메인구현은 끝났으니,
    유스케이스
    서비스
    포트
    어댑터(jpa엔티티)
순으로 구현하면될듯

예약의 특성상 기간이라,유니크제약으로 처리가 불가능할거고,이럴경우 비관적락을 걸고 최대한빨리끝내는게 맞을듯?
또한 TimeSLot에서 LocalTime.max를 사용하면,59.9999이렇게 나오는데,아마 mysql에서 이걸 다음날로 넘겨서 문제될수는있음
근데 로직상 타임슬롯을 직접 db에 넣는데는 없으니 알아만 두자

컨트롤러나 서비스단에서 시간확인후,10분이하는 거절

임시예약생성,예약상태변경
창고총예약조회,멤버예약조회

창고추가,가격변경,이름변경

타임라인의 리스트를 ReservationTime에서 Reservation으로변경

UpdateWareHouseAdapter FindReservationAdapter 테스트
WareHouseJpaEntity 업데이트로직 테스트

//완


updateReservationAdapter findWarehouseAdapter 완성 //완
ManageReservationService완성//완
인덱스생성//완
    reservation
        warehouse_id
        member_name,warehouse_id,startDateTime,endDateTime
        warehouse_id,startDateTime,endDateTime
    warehouse
        name
updateReservationAdapter findWarehouseAdapter 테스트 //완
ManageReservationService테스트//여기서 비관적락 동작테스트 https://markme-inur.tistory.com/145
서비스

비관적락 테스트 코루틴으로 변경
테스트 수 늘리기
    락걸고 범위밖에(락이안걸린곳)에 추가하기
    충돌체크
    충돌후 롤백후 2번스레드에서 삽입가능한지 테스트
    100개스레드에서 각각 충돌없이 삽입할때 걸리는시간
    100개스레드에서 전부 충돌할때 삽입할때 걸리는시간 //이건 필요한가



1번스레드 비관적락 켜짐
2번스레드 비관적락 대기
1번스레드 삽입
1번스레드



스키마 추가
    창고
        창고id
        창고번호
        창고이름
        기본가격
    창고예약(
        창고명
        멤버명
        시간2개
        생성시간
        예약상태(임시,확정,환불,취소)
        가격
    할증
        할증id
        할증이름
        할증퍼센트
        할증 연산방식
    멤버(스킵)

창고 임시예약생성
창고 임시예약 상태 변경

창고예약에서 특정 창고로 검색해서 타임라인을 생성
창고예약에서 특정 예약 검색가능(멤버명검색)

jpa엔티티에 도메인으로 변경 메서드와,도메인을 받아서 상태를 업데이트시키는 메서드를 추가


순서
    예약확인
    임시예약생성(여기서 동기문제발생)
    예약결제(임시예약업데이트)

예약확인
    해당 창고의 현재기준 이후의 모든 예약(아니면 1년정도루 줄여도됨) 상황 리턴
    임시예약도 포함

임시예약생성
    낙관적락 사용(유니크처리)
    인서트 실패시 캐치해서 프론트로 예외 던져서 다시 예약확인시키기
    검색 대상이 되는 객체 조건에 색인(index) 추가

예약결제
    오후 10시부터 오전 6시까지 할증
    일요일할증
    할증들은 데코레이터사용(곱연산 합연산 따로처리가능하게)

기타
    임시예약은 생성되고 30분이 지나면 배치로 삭제

창고테이블은
    창고id
    창고번호
    창고이름
    기본가격

할증테이블은
    할증id
    할증이름
    할증퍼센트
    할증 연산방식


창고예약테이블은
    창고id
    예약멤버(이건 간략하게 이름받는거로 처리)
    시작시간
    종료시간
    결제금액
    예약상태(임시,결제완료,취소,환불,완료?)

타임슬롯처리를 위해 jpa엔티티와 기본엔티티분리?


타임슬롯과 타임라인추가


타임슬롯은 하루를 표현,타임라인은 타임슬롯들을 모아두는 리스트
시작시간과 종료시간을 받고,타임슬롯 n개(시작날짜~중간날짜~종료날짜)로 분리


11:00~12:00
09:00~10:00//논오버랩
10:30~11:30//오버랩
11:20~11:40//오버랩
10:00~14:00//오버랩
15:00~15:30//논오버랩

포개지거나,일부겹치거나//오버랩
앞에있거나,뒤에있거나//논오버랩
날짜다르면//무조건논오버랩


start가 작고 && end가 크거나(새로운예약이 기존 예약을 완전히 포함)//사실상겹침
new.startTime < existing.endTime(새로운 예약 시작시간이 기존예약시간범위안에 있음)
new.endTime > existing.startTime(새로운 예약 종료시간이 기존예약시간범위안에 있음)


타임슬롯(각 날짜별 예약시간)//한예약은 하나이상의 타임슬롯으로 구성됨


ReservationSlots(localdatetime2개를 생성자로 받음,해당시간2개를 타임슬롯n개로 쪼개서 가짐)//한예약은 하나의 ReservationSlots으로 구성됨
    ReservationId(필요한가?양방향이 필요하면 있어야할거같긴하다)
    startTime
    endTime
    함수
        타임슬롯리스트 생성
        스타트타임슬롯 생성
        엔드 타임슬롯 생성


타임라인(ReservationSlots의 모음)//한 창고의 모든 예약은 하나의 타임라인으로 구성됨(창고id와 ReservationSlots의 스타트엔드를 인덱스로)
    창고id
    list<ReservationSlots>//정렬되어있어야함
        함수
            ReservationSlots의 오버랩여부를 체크(왼쪽과 오른쪽을 ReservationSlots으로 변경한후 비교하면될듯?)
            현재 타임라인에 정렬을 유지한채로 ReservationSlots을 삽입





